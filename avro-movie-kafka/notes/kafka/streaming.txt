Streaming has an inherent ability for parallelization.
• Streaming naturally lends itself to creating cached datasets and keeping them
up to date. This makes it well suited to systems where data and code are sep‐
arated by the network, notably data processing and GUIs.
• Streaming systems are more resilient than traditional approaches, as high
availability is built into the runtime and programs execute in a lossless man‐
ner (see the discussion of Event Sourcing in Chapter 7).
• Streaming functions are typically easier to reason about than regular pro‐
grams. Pure functions are free from side effects. Stateful functions are not,
but do avoid shared mutable state.
• Streaming systems embrace a polyglot culture, be it via different program‐
ming languages or different datastores.
• Programs are written at a higher level of abstraction, making them more
comprehensible